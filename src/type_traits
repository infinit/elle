#pragma once

#include_next <type_traits>

namespace std
{
  template <typename C, typename T = void>
  struct enable_if_exists
  {
    using type = T;
  };

  template <typename C, typename T = void>
  using enable_if_exists_t = typename enable_if_exists<C, T>::type;

  template <typename T>
  struct remove_cv_reference
  {
    using type = std::remove_cv_t<std::remove_reference_t<T>>;
  };

  template <typename T>
  using remove_cv_reference_t = typename remove_cv_reference<T>::type;

  /// C++20 proposal
  template <typename T>
  using remove_cvref_t = typename remove_cv_reference<T>::type;

  template <typename T>
  struct identity
  {
    using type = T;
  };

  /// Extract the signature of a (monomophic) lambda.
  ///
  /// http://stackoverflow.com/a/12283159/1353549.
  template <typename T>
  struct remove_class
  {};
  template <typename C, typename R, typename... A>
  struct remove_class<R(C::*)(A...)>
  {
    using type = R(A...);
  };
  template <typename C, typename R, typename... A>
  struct remove_class<R(C::*)(A...) const>
  {
    using type = R(A...);
  };
  template <typename C, typename R, typename... A>
  struct remove_class<R(C::*)(A...) volatile>
  {
    using type = R(A...);
  };
  template <typename C, typename R, typename... A>
  struct remove_class<R(C::*)(A...) const volatile>
  {
    using type = R(A...);
  };

  /// From a member function, extract the same signature, but without
  /// the class.
  template <typename T>
  using remove_class_t = typename remove_class<T>::type;


  template<typename T>
  struct get_signature_impl
  {
    using type = remove_class_t<decltype(&std::remove_reference_t<T>::operator())>;
  };

  template<typename R, typename... A>
  struct get_signature_impl<R(A...)>
  {
    using type = R(A...);
  };
  template<typename R, typename... A>
  struct get_signature_impl<R(&)(A...)>
  {
    using type = R(A...);
  };
  template<typename R, typename... A>
  struct get_signature_impl<R(*)(A...)>
  {
    using type = R(A...);
  };

  template<typename T>
  using get_signature = typename get_signature_impl<T>::type;
}

// Local Variables:
// mode: c++
// End:
